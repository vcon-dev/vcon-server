
# Generated by Qodo Gen
from server.storage.mongo import prepare_vcon_for_mongo
from datetime import datetime


# Dependencies:
# pip install pytest-mock
import pytest

class TestPrepareVconForMongo:

    # Vcon object with valid UUID and timestamps is correctly converted to MongoDB-ready dictionary
    def test_valid_vcon_conversion(self, mocker):
        # Arrange
        from server.storage.mongo import prepare_vcon_for_mongo
        from vcon import Vcon
        from datetime import datetime

        test_uuid = "123e4567-e89b-12d3-a456-426614174000"
        test_created_at = "2023-01-01T10:00:00"
        test_dialog_start = "2023-01-01T10:01:00"

        mock_vcon = mocker.Mock(spec=Vcon)
        mock_vcon.uuid = test_uuid
        mock_vcon.to_dict.return_value = {
            "uuid": test_uuid,
            "created_at": test_created_at,
            "dialog": [{"start": test_dialog_start}]
        }

        # Act
        result = prepare_vcon_for_mongo(mock_vcon)

        # Assert
        assert result["_id"] == test_uuid
        assert isinstance(result["created_at"], datetime)
        assert result["created_at"] == datetime.fromisoformat(test_created_at)
        assert isinstance(result["dialog"][0]["start"], datetime)
        assert result["dialog"][0]["start"] == datetime.fromisoformat(test_dialog_start)

    # Vcon object with missing created_at field
    def test_missing_created_at(self, mocker):
        # Arrange
        from server.storage.mongo import prepare_vcon_for_mongo
        from vcon import Vcon
        import pytest

        test_uuid = "123e4567-e89b-12d3-a456-426614174000"
        mock_vcon = mocker.Mock(spec=Vcon)
        mock_vcon.uuid = test_uuid
        mock_vcon.to_dict.return_value = {
            "uuid": test_uuid,
            "dialog": []
        }

        # Act & Assert
        with pytest.raises(KeyError):
            prepare_vcon_for_mongo(mock_vcon)

    # Created_at ISO timestamp is properly converted to datetime object
    def test_created_at_conversion(self, mocker):
        mock_vcon = mocker.Mock()
        mock_vcon.uuid = "123e4567-e89b-12d3-a456-426614174000"
        mock_vcon.to_dict.return_value = {
            "created_at": "2023-10-01T12:00:00",
            "dialog": []
        }
    
        result = prepare_vcon_for_mongo(mock_vcon)
    
        assert isinstance(result["created_at"], datetime)
        assert result["created_at"] == datetime.fromisoformat("2023-10-01T12:00:00")

    # Dialog start times are properly converted from ISO format to datetime objects
    def test_dialog_start_time_conversion(self, mocker):
        mock_vcon = mocker.Mock()
        mock_vcon.uuid = "123e4567-e89b-12d3-a456-426614174000"
        mock_vcon.to_dict.return_value = {
            "created_at": "2023-10-01T12:00:00",
            "dialog": [
                {"start": "2023-10-01T12:00:00"},
                {"start": "2023-10-02T13:00:00"}
            ]
        }
    
        result = prepare_vcon_for_mongo(mock_vcon)
    
        for dialog in result["dialog"]:
            assert isinstance(dialog["start"], datetime)

    # Original Vcon UUID is correctly set as MongoDB _id field
    def test_uuid_as_mongo_id(self, mocker):
        mock_vcon = mocker.Mock()
        mock_vcon.uuid = "123e4567-e89b-12d3-a456-426614174000"
        mock_vcon.to_dict.return_value = {
            "created_at": "2023-10-01T12:00:00",
            "dialog": []
        }
    
        result = prepare_vcon_for_mongo(mock_vcon)
    
        assert result["_id"] == "123e4567-e89b-12d3-a456-426614174000"
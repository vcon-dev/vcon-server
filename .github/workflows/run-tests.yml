name: Python conserver unit test
on: 
  push: # all
  pull_request: # all PRs for now

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository
    - name: Check out the repository
      uses: actions/checkout@v3

    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create .env file
      run: |
        echo "REDIS_URL=redis://redis:6379" >> .env
        echo "CONSERVER_API_TOKEN=fake-token" >> .env
        echo "POSTGRES_HOST=postgres" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "POSTGRES_DB=vcon_test_db" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@postgres:5432/vcon_test_db" >> .env
        # Add any other environment variables your app needs
        echo "CONSERVER_EXTERNAL_PORT=8000" >> .env
        echo "REDIS_EXTERNAL_PORT=8001" >> .env

    - name: We need to create Conserver network for now
      run: |
        docker network create conserver

    - name: Build and run services with Docker Compose
      run: |
        docker-compose up --build --detach

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60 bash -c 'until docker-compose exec -T postgres pg_isready -U postgres -d vcon_test_db; do 
          echo "PostgreSQL is unavailable - sleeping"
          sleep 2
        done'
        echo "PostgreSQL is ready!"

    - name: Verify services are running
      run: |
        docker-compose ps
        docker-compose logs postgres

    # Step 3: Run Docker container with additional commands
    - name: Run tests inside Docker container
      run: |
        docker-compose run --rm conserver bash -c "
          # Install tests dependencies
          poetry install &&
          # Install PostgreSQL adapter if not in pyproject.toml
          poetry add psycopg2-binary --group dev &&
          # Run the tests
          pytest --maxfail=5 --disable-warnings
        "

    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Docker Compose Logs ==="
        docker-compose logs
        echo "=== PostgreSQL Logs ==="
        docker-compose logs postgres
        echo "=== Conserver Logs ==="
        docker-compose logs conserver

    - name: Clean up
      if: always()
      run: docker-compose down

    - name: Install pytest-asyncio
      run: |
        docker-compose run --rm conserver pip install pytest-asyncio

    - name: Run tests inside Docker container
      run: |
        docker-compose run --rm conserver bash -c "
          # Install tests dependencies
          poetry install &&
          # Run the tests  
          pytest --maxfail=5 --disable-warnings
        "
